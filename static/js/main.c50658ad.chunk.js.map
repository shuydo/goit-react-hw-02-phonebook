{"version":3,"sources":["Comps/ContactForm/ContactForm.js","Comps/ContactList/ContactList.js","Comps/Filter/Filter.js","App.js","index.js"],"names":["ContactForm","state","name","number","handleChange","e","setState","target","value","handleSubmit","preventDefault","props","onSubmit","this","type","pattern","title","required","onChange","style","marginLeft","Component","ContactList","dBase","onDeleteContact","map","el","onClick","id","Filter","App","contacts","filter","appendDBase","data","includes","alert","pState","nanoid","changeFilter","getFilterContacts","filterLowerC","toLowerCase","contact","deleteContact","contactId","React","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2PAEqBA,E,4MACnBC,MAAQ,CACNC,KAAM,GACNC,OAAQ,I,EAGVC,aAAe,SAACC,GACd,EAAKC,SAAL,eAAiBD,EAAEE,OAAOL,KAAOG,EAAEE,OAAOC,S,EAG5CC,aAAe,SAACJ,GACdA,EAAEK,iBACF,EAAKC,MAAMC,SAAS,EAAKX,OACzB,EAAKK,SAAS,CAAEJ,KAAM,GAAIC,OAAQ,M,4CAGpC,WACE,OACE,uBAAMS,SAAUC,KAAKJ,aAArB,UACE,sCACA,uBACEK,KAAK,OACLZ,KAAK,OACLa,QAAQ,yHACRC,MAAM,kcACNC,UAAQ,EACRT,MAAOK,KAAKZ,MAAMC,KAClBgB,SAAUL,KAAKT,eAGjB,wCACA,uBACEU,KAAK,MACLZ,KAAK,SACLa,QAAQ,yFACRC,MAAM,giBACNC,UAAQ,EACRT,MAAOK,KAAKZ,MAAME,OAClBe,SAAUL,KAAKT,eAGjB,wBAAQU,KAAK,SAASK,MAAO,CAAEC,WAAY,IAA3C,gC,GAzCiCC,aCF1B,SAASC,EAAT,GAAkD,IAA3BC,EAA0B,EAA1BA,MAAOC,EAAmB,EAAnBA,gBAC3C,OACE,6BACGD,EAAME,KAAI,SAACC,GAAD,OACT,6BACE,8BACE,iCACGA,EAAGxB,KADN,KACcwB,EAAGvB,OAAS,cAE1B,wBACEW,KAAK,SAELa,QAAS,kBAAMH,EAAgBE,EAAGE,KAHpC,wBALKF,EAAGE,SCJL,SAASC,EAAT,GAAsC,IAApBrB,EAAmB,EAAnBA,MAAOU,EAAY,EAAZA,SACtC,OACE,qCACE,uDACA,uBAAOJ,KAAK,OAAON,MAAOA,EAAOU,SAAUA,O,ICG5BY,E,4MACnB7B,MAAQ,CACN8B,SAAU,CACR,CAAEH,GAAI,OAAQ1B,KAAM,iBAAkBC,OAAQ,aAC9C,CAAEyB,GAAI,OAAQ1B,KAAM,iBAAkBC,OAAQ,aAC9C,CAAEyB,GAAI,OAAQ1B,KAAM,iBAAkBC,OAAQ,aAC9C,CAAEyB,GAAI,OAAQ1B,KAAM,iBAAkBC,OAAQ,cAEhD6B,OAAQ,I,EAGVC,YAAc,SAACC,GACT,EAAKjC,MAAM8B,SAASN,KAAI,SAACC,GAAD,OAAQA,EAAGxB,QAAMiC,SAASD,EAAKhC,MACzDkC,MAAM,GAAD,OAAIF,EAAKhC,KAAT,6BAEL,EAAKI,UAAS,SAAC+B,GAAD,MAAa,CACzBN,SAAS,GAAD,mBACHM,EAAON,UADJ,cAGJH,GAAIU,YAAO,KACRJ,U,EAMbK,aAAe,SAAClC,GACd,EAAKC,SAAS,CAAE0B,OAAQ3B,EAAEE,OAAOC,S,EAGnCgC,kBAAoB,WAClB,IAAMC,EAAe,EAAKxC,MAAM+B,OAAOU,cAEvC,OAAO,EAAKzC,MAAM8B,SAASC,QAAO,SAACW,GAAD,OAChCA,EAAQzC,KAAKwC,cAAcP,SAASM,O,EAIxCG,cAAgB,SAACC,GACf,EAAKvC,UAAS,SAAC+B,GAAD,MAAa,CACzBN,SAAUM,EAAON,SAASC,QAAO,SAACW,GAAD,OAAaA,EAAQf,KAAOiB,U,4CAIjE,WACE,OACE,qCACE,2CACA,cAAC,EAAD,CAAajC,SAAUC,KAAKoB,cAC5B,0CACA,cAACJ,EAAD,CAAQrB,MAAOK,KAAKZ,MAAM+B,OAAQd,SAAUL,KAAK0B,eACjD,cAACjB,EAAD,CACEC,MAAOV,KAAK2B,oBACZhB,gBAAiBX,KAAK+B,uB,GArDCE,IAAMzB,WCDvC0B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.c50658ad.chunk.js","sourcesContent":["import { Component } from \"react\";\n\nexport default class ContactForm extends Component {\n  state = {\n    name: \"\",\n    number: \"\",\n  };\n\n  handleChange = (e) => {\n    this.setState({ [e.target.name]: e.target.value });\n  };\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    this.props.onSubmit(this.state);\n    this.setState({ name: \"\", number: \"\" });\n  };\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <h3>Name</h3>\n        <input\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n          value={this.state.name}\n          onChange={this.handleChange}\n        />\n\n        <h3>Number</h3>\n        <input\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          required\n          value={this.state.number}\n          onChange={this.handleChange}\n        />\n\n        <button type=\"submit\" style={{ marginLeft: 10 }}>\n          Add contact\n        </button>\n      </form>\n    );\n  }\n}\n","export default function ContactList({ dBase, onDeleteContact }) {\n  return (\n    <ol>\n      {dBase.map((el) => (\n        <li key={el.id}>\n          <p>\n            <span>\n              {el.name}: {el.number + \"  \"}\n            </span>\n            <button\n              type=\"button\"\n              // className=\"TodoList__btn\"\n              onClick={() => onDeleteContact(el.id)}\n            >\n              Delete\n            </button>\n          </p>\n        </li>\n      ))}\n    </ol>\n  );\n}\n","export default function Filter({ value, onChange }) {\n  return (\n    <>\n      <h3>Find contacts by name</h3>\n      <input type=\"text\" value={value} onChange={onChange}></input>\n    </>\n  );\n}\n","import React from \"react\"; // import { v4 as uuid } from \"uuid\";\nimport { nanoid } from \"nanoid\";\n\nimport ContactForm from \"./Comps/ContactForm/ContactForm\";\nimport ContactList from \"./Comps/ContactList/ContactList\";\nimport Filter from \"./Comps/Filter/Filter\";\n\nexport default class App extends React.Component {\n  state = {\n    contacts: [\n      { id: \"id-1\", name: \"Rousie Simpson\", number: \"459-12-56\" },\n      { id: \"id-2\", name: \"Hermeone Kline\", number: \"443-89-12\" },\n      { id: \"id-3\", name: \"Eaden Clements\", number: \"645-17-79\" },\n      { id: \"id-4\", name: \"Annie Copeland\", number: \"227-91-26\" },\n    ],\n    filter: \"\",\n  };\n\n  appendDBase = (data) => {\n    if (this.state.contacts.map((el) => el.name).includes(data.name))\n      alert(`${data.name} is already in contacts.`);\n    else\n      this.setState((pState) => ({\n        contacts: [\n          ...pState.contacts,\n          {\n            id: nanoid(10),\n            ...data,\n          },\n        ],\n      }));\n  };\n\n  changeFilter = (e) => {\n    this.setState({ filter: e.target.value });\n  };\n\n  getFilterContacts = () => {\n    const filterLowerC = this.state.filter.toLowerCase();\n\n    return this.state.contacts.filter((contact) =>\n      contact.name.toLowerCase().includes(filterLowerC)\n    );\n  };\n\n  deleteContact = (contactId) => {\n    this.setState((pState) => ({\n      contacts: pState.contacts.filter((contact) => contact.id !== contactId),\n    }));\n  };\n\n  render() {\n    return (\n      <>\n        <h1>Phonebook</h1>\n        <ContactForm onSubmit={this.appendDBase} />\n        <h2>Contacts</h2>\n        <Filter value={this.state.filter} onChange={this.changeFilter} />\n        <ContactList\n          dBase={this.getFilterContacts()}\n          onDeleteContact={this.deleteContact}\n        />\n      </>\n    );\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n// import './index.css' Shu;\nimport App from \"./App\";\n// import reportWebVitals from './reportWebVitals' Shu;\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals() Shu;\n"],"sourceRoot":""}